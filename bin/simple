#!/usr/bin/env python3

"""
Usage:
    simple [options] balances
    simple [options] tail [-n <num>] [-f]
    simple [options] goals [--archived] [--completed]
    simple [options] payments
    simple [options] card
    simple (-h | --help)
    simple --version

Options:
    -u <username>   Specify a Simple username to use
    -p              Supply a password via stdin
    -o [format]     Use <format> to output data [default: human]

Commands:
    balances        Display your account balances
    tail            Display a number of your latest transactions
    goals           Display your goals
    payments        Display your upcoming payments
    card            Display info about your Simple debit card

Tail Options:
    -n <num>        Get the <num> latest transactions [default: 10]
    -f              Display transactions as they're made, similar to the `tail -f` command

Goals Options:
    --archived      Show archived goals
    --completed     Show completed goals

Formats:
    human   Human-friendly output of the most important parts of the data
    raw     Raw output of the data
    pprint  Pretty-printed output of the data
    json    JSON dump of the data

"""

import json
import sys
import time
from getpass import getpass
from pprint import pprint

import click
#from clint.textui import puts
#from docopt import docopt

import simplebank


# Python 2/3 compatibility junk
try:
    input = raw_input
except NameError:
    pass


@click.group()
@click.option('-u', 'username', default='', help='Specify a username', required=False)
@click.option('-p', 'password', help='Read password from stdin', is_flag=True)
@click.option('-o', 'output_format', default='human', help='Output format', required=False)
@click.version_option(version=simplebank.__version__)
@click.help_option('-h')
@click.pass_context
def cli(ctx, username, password, output_format):
    #args = docopt(__doc__, version='simple-cli version 0.0.1', help=True)

    # Get username and password
    if not username:
        username = click.prompt('Simple username')

#    args['-n'] = int(args['-n'])

    if password:
        password = sys.stdin.read().strip()
    else:
        password = click.prompt('Simple password', hide_input=True)

    # # Log in
    api = simplebank.Api()
    if not api.login(username, password):
        print("Unable to log in with the username and password you supplied")
        exit(1)

    # Get outputter
    ctx.obj['output'] = get_outputter(output_format)
    ctx.obj['api'] = api

    # if args['balances']:
    #     return balances(api, output, args)
    # elif args['tail']:
    #     return tail(api, output, args)
    # elif args['goals']:
    #     return goals(api, output, args)
    # elif args['payments']:
    #     return payments(api, output, args)
    # elif args['card']:
    #     return card(api, output, args)


@cli.command()
@click.pass_obj
def balances(ctx):
    output = obj['output']
    api = obj['api']

    output(api.balances())
    return 0


@cli.command()
@click.pass_obj
def card(ctx):
    output = ctx['output']
    api = ctx['api']

    output(api.card())
    return 0


@cli.command()
@click.pass_obj
def payments(ctx):
    output = ctx['output']
    api = ctx['api']

    output(api.payments())

    return 0


@cli.command()
@click.option('-n', 'num', default=10, type=int, help='Fetch these many transactions')
@click.option('-f', 'follow', is_flag=True, help="Display transactions as they're made")
@click.help_option('-h')
@click.pass_obj
def tail(ctx, num, follow):
    output = ctx['output']
    api = ctx['api']

    # Get transactions
    data = api.transactions()
    transactions = data['transactions'][:num]
    transactions = sorted(transactions, key=lambda x: x['times']['when_received'])
    new_timestamp = data['timestamp']

    output(transactions)

    if follow:
        try:
            # [todo] Find a way that doesn't involve hitting new_transactions
            #   /api/notifications looks interesting, maybe that's what we need?
            while True:
                time.sleep(30)
                data = api.transactions(start=new_timestamp)

                if data['transactions']:
                    output(data['transactions'])

                new_timestamp = data['timestamp']
        except KeyboardInterrupt:
            pass    # ignore, just stop

    return 0


@cli.command()
@click.option('--archived', is_flag=True, help="Show archived goals")
@click.option('--completed', is_flag=True, help="Shop completed goals")
@click.help_option('-h')
@click.pass_obj
def goals(ctx, archived, completed):
    output = ctx['output']
    api = ctx['api']

    data = api.goals()

    if not archived:
        data = filter(lambda g: g['archived'] is False, data)
    elif not completed:
        data = filter(lambda g: not g.is_completed(), data)
    else:
        # Show completed/archived first
        data = sorted(data, key=lambda g: g.is_completed() or g['archived'], reverse=True)

    output(list(data))
    return 0


def get_outputter(method):
    if method == 'json':
        return lambda x: click.echo(json.dumps(x))
    elif method == 'pprint':
        return pprint
    elif method == 'raw':
        return click.echo
    elif method == 'human':
        def human_print(data):
            if isinstance(data, list):
                for thing in data:
                    click.echo(str(thing))
            else:
                click.echo(str(data))

        return human_print
    else:
        raise Exception("Unknown format: ".format(method))


if __name__ == '__main__':
    exit(cli(obj={}))
