#!/usr/bin/env python3

"""
Usage:
    simple [options] tail [-n <num>] [-f]
    simple [options] goals [--archived] [--completed]
    simple (-h | --help)
    simple --version

Options:
    -u <username>   Specify a Simple username to use
    -p              Supply a password via stdin
    -o [format]     Use <format> to output data [default: human]

Commands:
    tail            Display a number of your latest transactions
    card            Display info on your card
    goals           Display your goals

Tail Options:
    -n <num>        Get the <num> latest transactions [default: 10]
    -f              Display transactions as they're made, similar to the `tail -f` command

Goals Options:
    --archived      Show archived goals
    --completed     Show completed goals

Formats:
    human   Human-friendly output of the most important parts of the data
    raw     Raw output of the data
    pprint  Pretty-printed output of the data
    json    JSON dump of the data

"""

import json
import sys
import time
from getpass import getpass
from pprint import pprint

from clint.textui import puts
from docopt import docopt

import simplebank


# Python 2/3 compatibility junk
try:
    raw_input
except NameError:
    raw_input = input


def cli():
    args = docopt(__doc__, version='simple-cli version 0.0.1', help=True)

    # Get username and password
    if not args['-u']:
        args['-u'] = raw_input('Simple username: ')

    args['-n'] = int(args['-n'])

    if args['-p']:
        password = sys.stdin.read().strip()
    else:
        password = getpass('Simple password: ')

    # Log in
    api = simplebank.Api()
    api.login(args['-u'], password)

    # Get outputter
    output = get_outputter(args['-o'])

    if args['tail']:
        return tail(api, output, args)
    elif args['goals']:
        return goals(api, output, args)

    return 0


def tail(api, output, args):
    # Get transactions
    data = api.transactions()
    transactions = data['transactions'][:args['-n']]
    transactions = sorted(transactions, key=lambda x: x['times']['when_received'])
    new_timestamp = data['timestamp']

    output(transactions)

    if args['-f']:
        try:
            # [todo] Find a way that doesn't involve hitting new_transactions
            #   /api/notifications looks interesting, maybe that's what we need?
            while True:
                time.sleep(30)
                data = api.transactions(start=new_timestamp)

                if data['transactions']:
                    output(data['transactions'])

                new_timestamp = data['timestamp']
        except KeyboardInterrupt:
            pass    # ignore, just stop

    return 0


def goals(api, output, args):
    data = api.goals()

    if not args['--archived']:
        data = filter(lambda g: g['archived'] is False, data)

    if not args['--completed']:
        data = filter(lambda g: not g.is_completed(), data)
    else:
        # Show completed/archived first
        data = sorted(data, key=lambda g: g.is_completed(), reverse=True)

    output(list(data))
    return 0


def get_outputter(method):
    if method == 'json':
        return lambda x: puts(json.dumps(x))
    elif method == 'pprint':
        return pprint
    elif method == 'raw':
        return puts
    elif method == 'human':
        def human_print(data):
            if isinstance(data, list):
                for thing in data:
                    puts(str(thing))
            else:
                puts(str(data))

        return human_print
    else:
        raise Exception("Unknown format: ".format(method))


if __name__ == '__main__':
    exit(cli())
